# TLS
# 
# This module exports the TLSSocket class which lets you create encrypted TCP sockets (HTTPS/WSS)
import extern "crypto"
import extern "ssl"

import std.io (Error, Read, Write)
import std.string (String)
import std.drop (Drop)
import std.int (Format)
import std.net.ip (IpAddress)
import std.process (sleep)

import ws (Timeoutable)

class extern SSL_METHOD {
  let @data: Int32
}

class pub extern SockAddrIn {
  let pub @sin_family: Int16
  let pub @sin_port: Int16
  let pub @sin_addr: UInt32
  let pub @sin_zero: Int64
}

class pub extern Timeval {
  # Seconds
  let pub @tv_sec: Int64
  # Micros
  let pub @tv_usec: Int64
}

fn extern close(fd: Int32) -> Int32

fn extern socket(family: Int32, type: Int32, protocol: Int32) -> Int32

fn extern connect(
  socket: Int32,
  address: Pointer[SockAddrIn],
  size: Int32,
) -> Int32

fn extern htons(host: UInt16) -> UInt16

fn extern setsockopt(
  socket: Int32,
  level: Int32,
  option_name: Int32,
  option_value: Pointer[Timeval],
  option_len: Int32,
) -> Int32

fn extern TLS_method -> Pointer[SSL_METHOD]

fn extern SSL_CTX_new(method: Pointer[SSL_METHOD]) -> Pointer[UInt8]

fn extern SSL_new(ctx: Pointer[UInt8]) -> Pointer[UInt8]

fn extern SSL_set_fd(ssl: Pointer[UInt8], fd: Int32) -> Int32

fn extern SSL_connect(ssl: Pointer[UInt8]) -> Int32

fn extern SSL_write(
  ssl: Pointer[UInt8],
  buf: Pointer[UInt8],
  len: Int32,
) -> Int32

fn extern SSL_read(
  ssl: Pointer[UInt8],
  buf: Pointer[UInt8],
  len: Int32,
) -> Int32

fn extern SSL_free(ssl: Pointer[UInt8]) -> UInt8

fn extern SSL_CTX_free(ctx: Pointer[UInt8]) -> UInt8

fn extern SSL_CIPHER_get_name(ssl: Pointer[UInt8]) -> Pointer[UInt8]

fn extern SSL_get_current_cipher(ssl: Pointer[UInt8]) -> Pointer[UInt8]

let AF_INET = 2
let SOCK_STREAM = 1

# TODO Implement being able to re-use SSL contexts
class pub TLSSocket {
  # TODO Fix these
  let pub @socket: Int32
  let pub @ssl: Pointer[UInt8]
  let pub @ctx: Pointer[UInt8]

  fn static ip_v4_to_uint32(ip: IpAddress) -> UInt32 {
    # I think IpAddress.to_array or IpAddress.to_byte_array should be in std
    let parts = ip
      .to_string
      .split('.')
      .map(fn (part) { Int.parse(part, Format.Decimal).get })
      .to_array
    # I wonder if there's a better way
    return (
      (parts.get(3) << 24)
        >>> 0
        | (parts.get(2) << 16)
        >>> 0
        | (parts.get(1) << 8)
        >>> 0
        | parts.get(0)
    )
      as UInt32
  }

  fn pub get_cipher -> String {
    let name = SSL_CIPHER_get_name(SSL_get_current_cipher(@ssl))

    String.from_pointer(name)
  }

  # TODO Handle several possible errors
  fn pub static new(ip: IpAddress, port: Int) -> Result[TLSSocket, String] {
    if ip.v4?.false? { throw 'TLSSocket only supports IPv4 at the moment.' }

    # If it's -1 there's an error
    let sock = socket(AF_INET as Int32, SOCK_STREAM as Int32, 0 as Int32)

    let server_addr = SockAddrIn(
      sin_family: AF_INET as Int16,
      sin_port: htons(443 as UInt16) as Int16,
      sin_addr: ip_v4_to_uint32(ip),
      sin_zero: 0 as Int64,
    )

    # If it's < 0 then there's an error
    connect(sock, mut server_addr, 16 as Int32)

    let ctx = SSL_CTX_new(TLS_method())
    let ssl = SSL_new(ctx)

    # If return value = 0 then there's an error
    SSL_set_fd(ssl, sock)

    # If it's <= 0 there's an error
    SSL_connect(ssl)

    return Result.Ok(TLSSocket(sock, ssl, ctx))
  }
}

impl Read for TLSSocket {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    let received = ByteArray.filled(0, size)
    let got = SSL_read(@ssl, received.to_pointer, size as Int32) as Int

    if got > 0 {
      received.resize(got, 0)
      into.append(received)
      Result.Ok(got)
    } else {
      # TODO Should call SSL_get_error() and act accordingly
      Result.Error(Error.Other(got))
    }
  }
}

impl Write for TLSSocket {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Nil, Error] {
    let wrote = SSL_write(@ssl, bytes.to_pointer, bytes.size as Int32) as Int

    if wrote > 0 {
      Result.Ok(nil)
    } else {
      # TODO Should call SSL_get_error() and act accordingly
      Result.Error(Error.Other(wrote))
    }
  }

  fn pub mut write_string(string: String) -> Result[Nil, Error] {
    return write_bytes(string.to_byte_array)
  }

  fn pub mut flush -> Result[Nil, Error] {
    # TODO
    Result.Ok(nil)
  }
}

impl Drop for TLSSocket {
  fn mut drop {
    SSL_free(@ssl)
    close(@socket)
    SSL_CTX_free(@ctx)
  }
}

impl Timeoutable for TLSSocket {
  fn pub mut set_timeout(ms: Int) {
    let secs = ms / 1000 as Int64
    let micros = ms % 1000 as Int64
    let awa = Timeval(tv_sec: secs as Int64, tv_usec: micros as Int64)
    # 1 = SOL_SOCKET
    # 66 = SO_RCVTIMEO
    # 16 = sizeof(Timeval)
    setsockopt(@socket, 1 as Int32, 66 as Int32, mut awa, 16 as Int32)
    # TODO Handle error (Error.last_os_error)
  }
}

# 
# TODO Fix naming, maybe make everything more modular and handle errors
# 
